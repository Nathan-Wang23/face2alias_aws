import { __rest } from "tslib";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useEffect } from 'react';
import { applyDisplayName } from '../internal/utils/apply-display-name';
import InternalAlert from './internal';
import useBaseComponent from '../internal/hooks/use-base-component';
import { FunnelMetrics } from '../internal/analytics';
import { useFunnel, useFunnelStep, useFunnelSubStep } from '../internal/analytics/hooks/use-funnel';
import { getNameFromSelector, getSubStepAllSelector } from '../internal/analytics/selectors';
export default function Alert(_a) {
    var { type = 'info', visible = true } = _a, props = __rest(_a, ["type", "visible"]);
    const baseComponentProps = useBaseComponent('Alert');
    const { funnelInteractionId, submissionAttempt, funnelState, errorCount } = useFunnel();
    const { stepNumber, stepNameSelector } = useFunnelStep();
    const { subStepSelector, subStepNameSelector } = useFunnelSubStep();
    useEffect(() => {
        if (funnelInteractionId && visible && type === 'error' && funnelState.current !== 'complete') {
            const stepName = getNameFromSelector(stepNameSelector);
            const subStepName = getNameFromSelector(subStepNameSelector);
            errorCount.current++;
            if (subStepSelector) {
                FunnelMetrics.funnelSubStepError({
                    funnelInteractionId,
                    subStepSelector,
                    subStepName,
                    subStepNameSelector,
                    stepNumber,
                    stepName,
                    stepNameSelector,
                    subStepAllSelector: getSubStepAllSelector(),
                });
            }
            else {
                FunnelMetrics.funnelError({
                    funnelInteractionId,
                });
            }
            return () => {
                // eslint-disable-next-line react-hooks/exhaustive-deps
                errorCount.current--;
            };
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [funnelInteractionId, visible, submissionAttempt, errorCount]);
    return React.createElement(InternalAlert, Object.assign({ type: type, visible: visible }, props, baseComponentProps));
}
applyDisplayName(Alert, 'Alert');
//# sourceMappingURL=index.js.map