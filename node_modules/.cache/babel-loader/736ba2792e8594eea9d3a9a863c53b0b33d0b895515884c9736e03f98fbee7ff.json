{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __rest } from \"tslib\";\n/* eslint-disable @cloudscape-design/prefer-live-region */\nimport clsx from 'clsx';\nimport React, { memo, useEffect, useRef } from 'react';\nimport ScreenreaderOnly from '../screenreader-only';\nimport styles from './styles.css.js';\n/**\n * The live region is hidden in the layout, but visible for screen readers.\n * It's purpose it to announce changes e.g. when custom navigation logic is used.\n *\n * The way live region works differently in different browsers and screen readers and\n * it is recommended to manually test every new implementation.\n *\n * If you notice there are different words being merged together,\n * check if there are text nodes not being wrapped in elements, like:\n * <LiveRegion>\n *   {title}\n *   <span><Details /></span>\n * </LiveRegion>\n *\n * To fix, wrap \"title\" in an element:\n * <LiveRegion>\n *   <span>{title}</span>\n *   <span><Details /></span>\n * </LiveRegion>\n *\n * Or create a single text node if possible:\n * <LiveRegion>\n *   {`${title} ${details}`}\n * </LiveRegion>\n *\n * The live region is always atomic, because non-atomic regions can be treated by screen readers\n * differently and produce unexpected results. To imitate non-atomic announcements simply use\n * multiple live regions:\n * <>\n *   <LiveRegion>{title}</LiveRegion>\n *   <LiveRegion><Details /></LiveRegion>\n * </>\n */\nexport default memo(LiveRegion);\nfunction LiveRegion(_a) {\n  var {\n      assertive = false,\n      delay = 10,\n      visible = false,\n      tagName: TagName = 'span',\n      children,\n      id\n    } = _a,\n    restProps = __rest(_a, [\"assertive\", \"delay\", \"visible\", \"tagName\", \"children\", \"id\"]);\n  const sourceRef = useRef(null);\n  const targetRef = useRef(null);\n  /*\n    When React state changes, React often produces too many DOM updates, causing NVDA to\n    issue many announcements for the same logical event (See https://github.com/nvaccess/nvda/issues/7996).\n       The code below imitates a debouncing, scheduling a callback every time new React state\n    update is detected. When a callback resolves, it copies content from a muted element\n    to the live region, which is recognized by screen readers as an update.\n       If the use case requires no announcement to be ignored, use delay = 0, but ensure it\n    does not impact the performance. If it does, prefer using a string as children prop.\n  */\n  useEffect(() => {\n    function updateLiveRegion() {\n      if (targetRef.current && sourceRef.current) {\n        const sourceContent = extractInnerText(sourceRef.current);\n        const targetContent = extractInnerText(targetRef.current);\n        if (targetContent !== sourceContent) {\n          // The aria-atomic does not work properly in Voice Over, causing\n          // certain parts of the content to be ignored. To fix that,\n          // we assign the source text content as a single node.\n          targetRef.current.innerText = sourceContent;\n        }\n      }\n    }\n    let timeoutId;\n    if (delay) {\n      timeoutId = setTimeout(updateLiveRegion, delay);\n    } else {\n      updateLiveRegion();\n    }\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  });\n  return React.createElement(React.Fragment, null, visible && React.createElement(TagName, {\n    ref: sourceRef,\n    id: id\n  }, children), React.createElement(ScreenreaderOnly, Object.assign({}, restProps, {\n    className: clsx(styles.root, restProps.className)\n  }), !visible && React.createElement(TagName, {\n    ref: sourceRef,\n    \"aria-hidden\": \"true\"\n  }, children), React.createElement(\"span\", {\n    ref: targetRef,\n    \"aria-atomic\": \"true\",\n    \"aria-live\": assertive ? 'assertive' : 'polite'\n  })));\n}\n// This only extracts text content from the node including all its children which is enough for now.\n// To make it more powerful, it is possible to create a more sophisticated extractor with respect to\n// ARIA properties to ignore aria-hidden nodes and read ARIA labels from the live content.\nfunction extractInnerText(node) {\n  return (node.innerText || '').replace(/\\s+/g, ' ').trim();\n}","map":{"version":3,"names":["clsx","React","memo","useEffect","useRef","ScreenreaderOnly","styles","LiveRegion","_a","assertive","delay","visible","tagName","TagName","children","id","restProps","__rest","sourceRef","targetRef","updateLiveRegion","current","sourceContent","extractInnerText","targetContent","innerText","timeoutId","setTimeout","clearTimeout","createElement","Fragment","ref","Object","assign","className","root","node","replace","trim"],"sources":["/Users/ndwang/Documents/projects/face2alias_aws/node_modules/@cloudscape-design/components/internal/components/live-region/lib/default/internal/components/live-region/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @cloudscape-design/prefer-live-region */\n\nimport clsx from 'clsx';\nimport React, { memo, useEffect, useRef } from 'react';\nimport ScreenreaderOnly, { ScreenreaderOnlyProps } from '../screenreader-only';\nimport styles from './styles.css.js';\n\nexport interface LiveRegionProps extends ScreenreaderOnlyProps {\n  assertive?: boolean;\n  delay?: number;\n  visible?: boolean;\n  tagName?: 'span' | 'div';\n  children: React.ReactNode;\n  id?: string;\n}\n\n/**\n * The live region is hidden in the layout, but visible for screen readers.\n * It's purpose it to announce changes e.g. when custom navigation logic is used.\n *\n * The way live region works differently in different browsers and screen readers and\n * it is recommended to manually test every new implementation.\n *\n * If you notice there are different words being merged together,\n * check if there are text nodes not being wrapped in elements, like:\n * <LiveRegion>\n *   {title}\n *   <span><Details /></span>\n * </LiveRegion>\n *\n * To fix, wrap \"title\" in an element:\n * <LiveRegion>\n *   <span>{title}</span>\n *   <span><Details /></span>\n * </LiveRegion>\n *\n * Or create a single text node if possible:\n * <LiveRegion>\n *   {`${title} ${details}`}\n * </LiveRegion>\n *\n * The live region is always atomic, because non-atomic regions can be treated by screen readers\n * differently and produce unexpected results. To imitate non-atomic announcements simply use\n * multiple live regions:\n * <>\n *   <LiveRegion>{title}</LiveRegion>\n *   <LiveRegion><Details /></LiveRegion>\n * </>\n */\nexport default memo(LiveRegion);\n\nfunction LiveRegion({\n  assertive = false,\n  delay = 10,\n  visible = false,\n  tagName: TagName = 'span',\n  children,\n  id,\n  ...restProps\n}: LiveRegionProps) {\n  const sourceRef = useRef<HTMLSpanElement & HTMLDivElement>(null);\n  const targetRef = useRef<HTMLSpanElement & HTMLDivElement>(null);\n\n  /*\n    When React state changes, React often produces too many DOM updates, causing NVDA to\n    issue many announcements for the same logical event (See https://github.com/nvaccess/nvda/issues/7996).\n\n    The code below imitates a debouncing, scheduling a callback every time new React state\n    update is detected. When a callback resolves, it copies content from a muted element\n    to the live region, which is recognized by screen readers as an update.\n\n    If the use case requires no announcement to be ignored, use delay = 0, but ensure it\n    does not impact the performance. If it does, prefer using a string as children prop.\n  */\n  useEffect(() => {\n    function updateLiveRegion() {\n      if (targetRef.current && sourceRef.current) {\n        const sourceContent = extractInnerText(sourceRef.current);\n        const targetContent = extractInnerText(targetRef.current);\n        if (targetContent !== sourceContent) {\n          // The aria-atomic does not work properly in Voice Over, causing\n          // certain parts of the content to be ignored. To fix that,\n          // we assign the source text content as a single node.\n          targetRef.current.innerText = sourceContent;\n        }\n      }\n    }\n\n    let timeoutId: null | number;\n    if (delay) {\n      timeoutId = setTimeout(updateLiveRegion, delay);\n    } else {\n      updateLiveRegion();\n    }\n\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  });\n\n  return (\n    <>\n      {visible && (\n        <TagName ref={sourceRef} id={id}>\n          {children}\n        </TagName>\n      )}\n\n      <ScreenreaderOnly {...restProps} className={clsx(styles.root, restProps.className)}>\n        {!visible && (\n          <TagName ref={sourceRef} aria-hidden=\"true\">\n            {children}\n          </TagName>\n        )}\n\n        <span ref={targetRef} aria-atomic=\"true\" aria-live={assertive ? 'assertive' : 'polite'}></span>\n      </ScreenreaderOnly>\n    </>\n  );\n}\n\n// This only extracts text content from the node including all its children which is enough for now.\n// To make it more powerful, it is possible to create a more sophisticated extractor with respect to\n// ARIA properties to ignore aria-hidden nodes and read ARIA labels from the live content.\nfunction extractInnerText(node: HTMLElement) {\n  return (node.innerText || '').replace(/\\s+/g, ' ').trim();\n}\n"],"mappings":"AAAA;AACA;;AAEA;AAEA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,KAAK,IAAIC,IAAI,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACtD,OAAOC,gBAA2C,MAAM,sBAAsB;AAC9E,OAAOC,MAAM,MAAM,iBAAiB;AAWpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,eAAeJ,IAAI,CAACK,UAAU,CAAC;AAE/B,SAASA,UAAUA,CAACC,EAQF;MARE;MAClBC,SAAS,GAAG,KAAK;MACjBC,KAAK,GAAG,EAAE;MACVC,OAAO,GAAG,KAAK;MACfC,OAAO,EAAEC,OAAO,GAAG,MAAM;MACzBC,QAAQ;MACRC;IAAE,IAAAP,EAEc;IADbQ,SAAS,GAAAC,MAAA,CAAAT,EAAA,EAPM,8DAQnB,CADa;EAEZ,MAAMU,SAAS,GAAGd,MAAM,CAAmC,IAAI,CAAC;EAChE,MAAMe,SAAS,GAAGf,MAAM,CAAmC,IAAI,CAAC;EAEhE;;;;;;;;;EAWAD,SAAS,CAAC,MAAK;IACb,SAASiB,gBAAgBA,CAAA;MACvB,IAAID,SAAS,CAACE,OAAO,IAAIH,SAAS,CAACG,OAAO,EAAE;QAC1C,MAAMC,aAAa,GAAGC,gBAAgB,CAACL,SAAS,CAACG,OAAO,CAAC;QACzD,MAAMG,aAAa,GAAGD,gBAAgB,CAACJ,SAAS,CAACE,OAAO,CAAC;QACzD,IAAIG,aAAa,KAAKF,aAAa,EAAE;UACnC;UACA;UACA;UACAH,SAAS,CAACE,OAAO,CAACI,SAAS,GAAGH,aAAa;;;IAGjD;IAEA,IAAII,SAAwB;IAC5B,IAAIhB,KAAK,EAAE;MACTgB,SAAS,GAAGC,UAAU,CAACP,gBAAgB,EAAEV,KAAK,CAAC;KAChD,MAAM;MACLU,gBAAgB,EAAE;;IAGpB,OAAO,MAAK;MACV,IAAIM,SAAS,EAAE;QACbE,YAAY,CAACF,SAAS,CAAC;;IAE3B,CAAC;EACH,CAAC,CAAC;EAEF,OACEzB,KAAA,CAAA4B,aAAA,CAAA5B,KAAA,CAAA6B,QAAA,QACGnB,OAAO,IACNV,KAAA,CAAA4B,aAAA,CAAChB,OAAO;IAACkB,GAAG,EAAEb,SAAS;IAAEH,EAAE,EAAEA;EAAE,GAC5BD,QAAQ,CAEZ,EAEDb,KAAA,CAAA4B,aAAA,CAACxB,gBAAgB,EAAA2B,MAAA,CAAAC,MAAA,KAAKjB,SAAS;IAAEkB,SAAS,EAAElC,IAAI,CAACM,MAAM,CAAC6B,IAAI,EAAEnB,SAAS,CAACkB,SAAS;EAAC,IAC/E,CAACvB,OAAO,IACPV,KAAA,CAAA4B,aAAA,CAAChB,OAAO;IAACkB,GAAG,EAAEb,SAAS;IAAA,eAAc;EAAM,GACxCJ,QAAQ,CAEZ,EAEDb,KAAA,CAAA4B,aAAA;IAAME,GAAG,EAAEZ,SAAS;IAAA,eAAc,MAAM;IAAA,aAAYV,SAAS,GAAG,WAAW,GAAG;EAAQ,EAAS,CAC9E,CAClB;AAEP;AAEA;AACA;AACA;AACA,SAASc,gBAAgBA,CAACa,IAAiB;EACzC,OAAO,CAACA,IAAI,CAACX,SAAS,IAAI,EAAE,EAAEY,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACC,IAAI,EAAE;AAC3D"},"metadata":{},"sourceType":"module","externalDependencies":[]}