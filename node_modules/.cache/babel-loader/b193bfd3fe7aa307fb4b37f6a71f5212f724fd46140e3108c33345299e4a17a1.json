{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect } from 'react';\nimport { useStableEventHandler } from '../use-stable-event-handler';\nimport { createSingletonHandler } from '../use-singleton-handler';\nconst useMutationSingleton = createSingletonHandler(handler => {\n  const observer = new MutationObserver(() => handler());\n  observer.observe(document.body, {\n    attributes: true,\n    subtree: true\n  });\n  return () => observer.disconnect();\n});\n/**\n * Fires onChange with the given target element as an argument every time any DOM node attribute changes.\n *\n * @deprecated The hook has performance implications. Consider alternatives.\n */\nexport function useMutationObserver(elementRef, onChange) {\n  const handler = useStableEventHandler(() => {\n    if (elementRef.current) {\n      onChange(elementRef.current);\n    }\n  });\n  useMutationSingleton(handler);\n  useEffect(() => {\n    handler();\n  }, [handler]);\n}","map":{"version":3,"names":["useEffect","useStableEventHandler","createSingletonHandler","useMutationSingleton","handler","observer","MutationObserver","observe","document","body","attributes","subtree","disconnect","useMutationObserver","elementRef","onChange","current"],"sources":["/Users/nelaurar/Desktop/proj /my-app/node_modules/@cloudscape-design/components/internal/hooks/use-mutation-observer/lib/default/internal/hooks/use-mutation-observer/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect } from 'react';\nimport { useStableEventHandler } from '../use-stable-event-handler';\nimport { createSingletonHandler } from '../use-singleton-handler';\n\nconst useMutationSingleton = createSingletonHandler<void>(handler => {\n  const observer = new MutationObserver(() => handler());\n  observer.observe(document.body, { attributes: true, subtree: true });\n  return () => observer.disconnect();\n});\n\n/**\n * Fires onChange with the given target element as an argument every time any DOM node attribute changes.\n *\n * @deprecated The hook has performance implications. Consider alternatives.\n */\nexport function useMutationObserver(\n  elementRef: React.RefObject<HTMLElement>,\n  onChange: (element: HTMLElement) => void\n) {\n  const handler = useStableEventHandler(() => {\n    if (elementRef.current) {\n      onChange(elementRef.current);\n    }\n  });\n  useMutationSingleton(handler);\n\n  useEffect(() => {\n    handler();\n  }, [handler]);\n}\n"],"mappings":"AAAA;AACA;AACA,SAAgBA,SAAS,QAAQ,OAAO;AACxC,SAASC,qBAAqB,QAAQ,6BAA6B;AACnE,SAASC,sBAAsB,QAAQ,0BAA0B;AAEjE,MAAMC,oBAAoB,GAAGD,sBAAsB,CAAOE,OAAO,IAAG;EAClE,MAAMC,QAAQ,GAAG,IAAIC,gBAAgB,CAAC,MAAMF,OAAO,EAAE,CAAC;EACtDC,QAAQ,CAACE,OAAO,CAACC,QAAQ,CAACC,IAAI,EAAE;IAAEC,UAAU,EAAE,IAAI;IAAEC,OAAO,EAAE;EAAI,CAAE,CAAC;EACpE,OAAO,MAAMN,QAAQ,CAACO,UAAU,EAAE;AACpC,CAAC,CAAC;AAEF;;;;;AAKA,OAAM,SAAUC,mBAAmBA,CACjCC,UAAwC,EACxCC,QAAwC;EAExC,MAAMX,OAAO,GAAGH,qBAAqB,CAAC,MAAK;IACzC,IAAIa,UAAU,CAACE,OAAO,EAAE;MACtBD,QAAQ,CAACD,UAAU,CAACE,OAAO,CAAC;;EAEhC,CAAC,CAAC;EACFb,oBAAoB,CAACC,OAAO,CAAC;EAE7BJ,SAAS,CAAC,MAAK;IACbI,OAAO,EAAE;EACX,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}