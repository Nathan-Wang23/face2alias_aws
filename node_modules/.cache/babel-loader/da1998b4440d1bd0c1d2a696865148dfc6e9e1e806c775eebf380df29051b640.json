{"ast":null,"code":"import logo from './logo.svg';\nimport './App.css';\n// // add couldscape\n// import * as React from \"react\";\n// import FileUpload from \"@cloudscape-design/components/file-upload\";\n// import FormField from \"@cloudscape-design/components/form-field\";\n\n// add from the LogRocket\nimport React, { useEffect, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport Hamburger from 'hamburger-react'; // hamburger \n//\n\nfunction App(props) {\n\n  //  <header className=\"App-header\">\n  //   <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  //   <p>\n  //     Edit <code>src/App.js</code> and save to reload.\n  //   </p>\n  //   <a\n  //     className=\"App-link\"\n  //     href=\"https://reactjs.org\"\n  //     target=\"_blank\"\n  //     rel=\"noopener noreferrer\"\n  //   >\n  //     Learn React\n  //   </a>\n  // </header> \n}\n_c = App;\nexport default App;\n// export default () => {\n//   const [value, setValue] = React.useState([]);\n//   return (\n//     <FormField\n//       label=\"Form field label\"\n//       description=\"Description\"\n//     >\n//       <FileUpload\n//         onChange={({ detail }) => setValue(detail.value)}\n//         value={value}\n//         i18nStrings={{\n//           uploadButtonText: e =>\n//             e ? \"Choose files\" : \"Choose file\",\n//           dropzoneText: e =>\n//             e\n//               ? \"Drop files to upload\"\n//               : \"Drop file to upload\",\n//           removeFileAriaLabel: e =>\n//             `Remove file ${e + 1}`,\n//           limitShowFewer: \"Show fewer files\",\n//           limitShowMore: \"Show more files\",\n//           errorIconAriaLabel: \"Error\"\n//         }}\n//         showFileLastModified\n//         showFileSize\n//         showFileThumbnail\n//         tokenLimit={3}\n//         constraintText=\"Hint text for file requirements\"\n//       />\n//     </FormField>\n//   );\n// }\n\n// // Upload file \n// import * as React from \"react\" - https://cloudscape.design/components/file-upload/?tabId=playground;\n// import FileUpload from \"@cloudscape-design/components/file-upload\";\n// import FormField from \"@cloudscape-design/components/form-field\";\n\n// export default () => {\n//   const [value, setValue] = React.useState([]);\n//   return (\n//     <FormField\n//       label=\"Form field label\"\n//       description=\"Description\"\n//     >\n//       <FileUpload\n//         onChange={({ detail }) => setValue(detail.value)}\n//         value={value}\n//         i18nStrings={{\n//           uploadButtonText: e =>\n//             e ? \"Choose files\" : \"Choose file\",\n//           dropzoneText: e =>\n//             e\n//               ? \"Drop files to upload\"\n//               : \"Drop file to upload\",\n//           removeFileAriaLabel: e =>\n//             `Remove file ${e + 1}`,\n//           limitShowFewer: \"Show fewer files\",\n//           limitShowMore: \"Show more files\",\n//           errorIconAriaLabel: \"Error\"\n//         }}\n//         showFileLastModified\n//         showFileSize\n//         showFileThumbnail\n//         tokenLimit={3}\n//         constraintText=\"Hint text for file requirements\"\n//       />\n//     </FormField>\n//   );\n// }\n\n// From the website - https://blog.logrocket.com/create-drag-and-drop-component-react-dropzone/\n// function App(props) {\n//   const [files, setFiles] = useState([]);\n//   const {getRootProps, getInputProps} = useDropzone({\n//     accept: 'image/*',\n//     onDrop: acceptedFiles => {\n//       setFiles(acceptedFiles.map(file => Object.assign(file, {\n//         preview: URL.createObjectURL(file)\n//       })));\n//     }\n//   });\n\n//   const thumbs = files.map(file => (\n//     <div style={thumb} key={file.name}>\n//       <div style={thumbInner}>\n//         <img\n//           src={file.preview}\n//           style={img}\n//         />\n//       </div>\n//     </div>\n//   ));\n\n//   useEffect(() => {\n//     // Make sure to revoke the data uris to avoid memory leaks\n//     files.forEach(file => URL.revokeObjectURL(file.preview));\n//   }, [files]);\n\n//   return (\n//     <section className=\"container\">\n//       <div {...getRootProps({className: 'dropzone'})}>\n//         <input {...getInputProps()} />\n//         <p>Drag 'n' drop some files here, or click to select files</p>\n//       </div>\n//       <aside style={thumbsContainer}>\n//         {thumbs}\n//       </aside>\n//     </section>\n//   );\n\n// }\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","React","useEffect","useState","useDropzone","Hamburger","App","props","_c","$RefreshReg$"],"sources":["/Users/nelaurar/Desktop/proj /my-app/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n// // add couldscape\n// import * as React from \"react\";\n// import FileUpload from \"@cloudscape-design/components/file-upload\";\n// import FormField from \"@cloudscape-design/components/form-field\";\n\n// add from the LogRocket\nimport React, {useEffect, useState} from 'react';\nimport {useDropzone} from 'react-dropzone';\nimport Hamburger from 'hamburger-react' // hamburger \n//\n\n\nfunction App(props) {\n  \n      //  <header className=\"App-header\">\n      //   <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      //   <p>\n      //     Edit <code>src/App.js</code> and save to reload.\n      //   </p>\n      //   <a\n      //     className=\"App-link\"\n      //     href=\"https://reactjs.org\"\n      //     target=\"_blank\"\n      //     rel=\"noopener noreferrer\"\n      //   >\n      //     Learn React\n      //   </a>\n      // </header> \n}\n\nexport default App;\n// export default () => {\n//   const [value, setValue] = React.useState([]);\n//   return (\n//     <FormField\n//       label=\"Form field label\"\n//       description=\"Description\"\n//     >\n//       <FileUpload\n//         onChange={({ detail }) => setValue(detail.value)}\n//         value={value}\n//         i18nStrings={{\n//           uploadButtonText: e =>\n//             e ? \"Choose files\" : \"Choose file\",\n//           dropzoneText: e =>\n//             e\n//               ? \"Drop files to upload\"\n//               : \"Drop file to upload\",\n//           removeFileAriaLabel: e =>\n//             `Remove file ${e + 1}`,\n//           limitShowFewer: \"Show fewer files\",\n//           limitShowMore: \"Show more files\",\n//           errorIconAriaLabel: \"Error\"\n//         }}\n//         showFileLastModified\n//         showFileSize\n//         showFileThumbnail\n//         tokenLimit={3}\n//         constraintText=\"Hint text for file requirements\"\n//       />\n//     </FormField>\n//   );\n// }\n\n// // Upload file \n// import * as React from \"react\" - https://cloudscape.design/components/file-upload/?tabId=playground;\n// import FileUpload from \"@cloudscape-design/components/file-upload\";\n// import FormField from \"@cloudscape-design/components/form-field\";\n\n// export default () => {\n//   const [value, setValue] = React.useState([]);\n//   return (\n//     <FormField\n//       label=\"Form field label\"\n//       description=\"Description\"\n//     >\n//       <FileUpload\n//         onChange={({ detail }) => setValue(detail.value)}\n//         value={value}\n//         i18nStrings={{\n//           uploadButtonText: e =>\n//             e ? \"Choose files\" : \"Choose file\",\n//           dropzoneText: e =>\n//             e\n//               ? \"Drop files to upload\"\n//               : \"Drop file to upload\",\n//           removeFileAriaLabel: e =>\n//             `Remove file ${e + 1}`,\n//           limitShowFewer: \"Show fewer files\",\n//           limitShowMore: \"Show more files\",\n//           errorIconAriaLabel: \"Error\"\n//         }}\n//         showFileLastModified\n//         showFileSize\n//         showFileThumbnail\n//         tokenLimit={3}\n//         constraintText=\"Hint text for file requirements\"\n//       />\n//     </FormField>\n//   );\n// }\n\n\n// From the website - https://blog.logrocket.com/create-drag-and-drop-component-react-dropzone/\n// function App(props) {\n//   const [files, setFiles] = useState([]);\n//   const {getRootProps, getInputProps} = useDropzone({\n//     accept: 'image/*',\n//     onDrop: acceptedFiles => {\n//       setFiles(acceptedFiles.map(file => Object.assign(file, {\n//         preview: URL.createObjectURL(file)\n//       })));\n//     }\n//   });\n\n//   const thumbs = files.map(file => (\n//     <div style={thumb} key={file.name}>\n//       <div style={thumbInner}>\n//         <img\n//           src={file.preview}\n//           style={img}\n//         />\n//       </div>\n//     </div>\n//   ));\n\n//   useEffect(() => {\n//     // Make sure to revoke the data uris to avoid memory leaks\n//     files.forEach(file => URL.revokeObjectURL(file.preview));\n//   }, [files]);\n\n//   return (\n//     <section className=\"container\">\n//       <div {...getRootProps({className: 'dropzone'})}>\n//         <input {...getInputProps()} />\n//         <p>Drag 'n' drop some files here, or click to select files</p>\n//       </div>\n//       <aside style={thumbsContainer}>\n//         {thumbs}\n//       </aside>\n//     </section>\n//   );\n    \n// }\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB;AACA;AACA;AACA;;AAEA;AACA,OAAOC,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAChD,SAAQC,WAAW,QAAO,gBAAgB;AAC1C,OAAOC,SAAS,MAAM,iBAAiB,EAAC;AACxC;;AAGA,SAASC,GAAGA,CAACC,KAAK,EAAE;;EAEd;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAAA;AACLC,EAAA,GAhBQF,GAAG;AAkBZ,eAAeA,GAAG;AACl},"metadata":{},"sourceType":"module","externalDependencies":[]}