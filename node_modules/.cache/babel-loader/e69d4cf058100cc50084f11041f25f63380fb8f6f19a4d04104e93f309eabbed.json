{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useEffect, useRef } from 'react';\n/**\n * A callback that stays stable between renders even as the dependencies change.\n * Not a recommended React pattern, so it should be used sparingly and only if\n * the callback is an event handler (i.e. not used during rendering) and causing\n * clear performance issues.\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback\n */\nexport function useStableEventHandler(fn) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = fn;\n  });\n  return useCallback(function () {\n    var _a;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return (_a = ref.current) === null || _a === void 0 ? void 0 : _a.apply(undefined, args);\n  }, []);\n}","map":{"version":3,"names":["useCallback","useEffect","useRef","useStableEventHandler","fn","ref","current","_a","_len","arguments","length","args","Array","_key","apply","undefined"],"sources":["/Users/nelaurar/Desktop/proj /my-app/node_modules/@cloudscape-design/components/internal/hooks/use-stable-event-handler/lib/default/internal/hooks/use-stable-event-handler/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useEffect, useRef } from 'react';\n\n/**\n * A callback that stays stable between renders even as the dependencies change.\n * Not a recommended React pattern, so it should be used sparingly and only if\n * the callback is an event handler (i.e. not used during rendering) and causing\n * clear performance issues.\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback\n */\nexport function useStableEventHandler<T extends (...args: any[]) => any>(fn: T): T {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback((...args: any[]) => ref.current?.apply(undefined, args), []) as T;\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,WAAW,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEtD;;;;;;;;AAQA,OAAM,SAAUC,qBAAqBA,CAAoCC,EAAK;EAC5E,MAAMC,GAAG,GAAGH,MAAM,EAAK;EAEvBD,SAAS,CAAC,MAAK;IACbI,GAAG,CAACC,OAAO,GAAGF,EAAE;EAClB,CAAC,CAAC;EAEF,OAAOJ,WAAW,CAAC,YAAmB;IAAA,IAAAO,EAAA;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAfC,IAAW,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAXF,IAAW,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IAAK,QAAAN,EAAA,GAAAF,GAAG,CAACC,OAAO,cAAAC,EAAA,uBAAAA,EAAA,CAAEO,KAAK,CAACC,SAAS,EAAEJ,IAAI,CAAC;EAAA,GAAE,EAAE,CAAM;AACtF"},"metadata":{},"sourceType":"module","externalDependencies":[]}