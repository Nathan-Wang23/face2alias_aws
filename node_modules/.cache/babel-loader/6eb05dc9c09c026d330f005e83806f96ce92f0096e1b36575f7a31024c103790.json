{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useContext } from 'react';\nimport { FunnelContext, FunnelStepContext, FunnelSubStepContext } from '../context/analytics-context';\nimport { DATA_ATTR_FUNNEL_INTERACTION_ID, DATA_ATTR_FUNNEL_SUBSTEP, getSubStepAllSelector } from '../selectors';\nimport { FunnelMetrics } from '../';\n/**\n * Custom React Hook to manage and interact with FunnelSubStep.\n * This hook will provide necessary properties and methods required\n * to track and manage interactions with a FunnelSubStep component.\n *\n * The `onFocus` method is used to track the beginning of interaction with the FunnelSubStep.\n * The `onBlur` method is used to track the completion of interaction with the FunnelSubStep.\n * The subStepId is a unique identifier for the funnel sub-step.\n * The subStepRef is a reference to the DOM element of the funnel sub-step.\n */\nexport const useFunnelSubStep = () => {\n  const context = useContext(FunnelSubStepContext);\n  const {\n    funnelInteractionId,\n    funnelState\n  } = useFunnel();\n  const {\n    stepNumber,\n    stepNameSelector\n  } = useFunnelStep();\n  const {\n    subStepId,\n    subStepSelector,\n    subStepNameSelector,\n    subStepRef,\n    isNestedSubStep\n  } = context;\n  if (isNestedSubStep) {\n    return context;\n  }\n  const onFocus = event => {\n    if (funnelInteractionId && subStepRef.current && (!event.relatedTarget || !subStepRef.current.contains(event.relatedTarget))) {\n      FunnelMetrics.funnelSubStepStart({\n        funnelInteractionId,\n        subStepSelector,\n        subStepNameSelector,\n        stepNumber,\n        stepNameSelector,\n        subStepAllSelector: getSubStepAllSelector()\n      });\n    }\n  };\n  const onBlur = event => {\n    if (funnelInteractionId && subStepRef.current && !subStepRef.current.contains(event.relatedTarget) && funnelState.current !== 'cancelled') {\n      FunnelMetrics.funnelSubStepComplete({\n        funnelInteractionId,\n        subStepSelector,\n        subStepNameSelector,\n        stepNumber,\n        stepNameSelector,\n        subStepAllSelector: getSubStepAllSelector()\n      });\n    }\n  };\n  const funnelSubStepProps = funnelInteractionId ? {\n    [DATA_ATTR_FUNNEL_SUBSTEP]: subStepId,\n    onFocus,\n    onBlur\n  } : {};\n  return Object.assign({\n    funnelSubStepProps\n  }, context);\n};\n/**\n * Custom React Hook to manage and interact with FunnelStep.\n * This hook will provide necessary properties required to track\n * and manage interactions with a FunnelStep component.\n *\n * The 'data-analytics-funnel-step' property of funnelStepProps is used to track the index of the current step in the funnel.\n * The context contains additional properties of the FunnelStep.\n */\nexport const useFunnelStep = () => {\n  const context = useContext(FunnelStepContext);\n  return context;\n};\n/**\n * Custom React Hook to manage and interact with Funnel.\n * This hook will provide necessary properties required to track\n * and manage interactions with a Funnel component.\n *\n * The 'data-analytics-funnel-interaction-id' property of funnelProps is used to track the unique identifier of the current interaction with the funnel.\n */\nexport const useFunnel = () => {\n  const context = useContext(FunnelContext);\n  const funnelProps = context.funnelInteractionId ? {\n    [DATA_ATTR_FUNNEL_INTERACTION_ID]: context.funnelInteractionId\n  } : {};\n  return Object.assign({\n    funnelProps\n  }, context);\n};","map":{"version":3,"names":["useContext","FunnelContext","FunnelStepContext","FunnelSubStepContext","DATA_ATTR_FUNNEL_INTERACTION_ID","DATA_ATTR_FUNNEL_SUBSTEP","getSubStepAllSelector","FunnelMetrics","useFunnelSubStep","context","funnelInteractionId","funnelState","useFunnel","stepNumber","stepNameSelector","useFunnelStep","subStepId","subStepSelector","subStepNameSelector","subStepRef","isNestedSubStep","onFocus","event","current","relatedTarget","contains","funnelSubStepStart","subStepAllSelector","onBlur","funnelSubStepComplete","funnelSubStepProps","Object","assign","funnelProps"],"sources":["/Users/nathanwang/Downloads/aws_project/face2alias_aws/node_modules/@cloudscape-design/components/internal/analytics/hooks/lib/default/internal/analytics/hooks/use-funnel.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useContext } from 'react';\nimport { FunnelContext, FunnelStepContext, FunnelSubStepContext } from '../context/analytics-context';\nimport { DATA_ATTR_FUNNEL_INTERACTION_ID, DATA_ATTR_FUNNEL_SUBSTEP, getSubStepAllSelector } from '../selectors';\nimport { FunnelMetrics } from '../';\n\n/**\n * Custom React Hook to manage and interact with FunnelSubStep.\n * This hook will provide necessary properties and methods required\n * to track and manage interactions with a FunnelSubStep component.\n *\n * The `onFocus` method is used to track the beginning of interaction with the FunnelSubStep.\n * The `onBlur` method is used to track the completion of interaction with the FunnelSubStep.\n * The subStepId is a unique identifier for the funnel sub-step.\n * The subStepRef is a reference to the DOM element of the funnel sub-step.\n */\nexport const useFunnelSubStep = () => {\n  const context = useContext(FunnelSubStepContext);\n  const { funnelInteractionId, funnelState } = useFunnel();\n  const { stepNumber, stepNameSelector } = useFunnelStep();\n\n  const { subStepId, subStepSelector, subStepNameSelector, subStepRef, isNestedSubStep } = context;\n\n  if (isNestedSubStep) {\n    return context;\n  }\n\n  const onFocus = (event: React.FocusEvent<HTMLDivElement>) => {\n    if (\n      funnelInteractionId &&\n      subStepRef.current &&\n      (!event.relatedTarget || !subStepRef.current.contains(event.relatedTarget as Node))\n    ) {\n      FunnelMetrics.funnelSubStepStart({\n        funnelInteractionId,\n        subStepSelector,\n        subStepNameSelector,\n        stepNumber,\n        stepNameSelector,\n        subStepAllSelector: getSubStepAllSelector(),\n      });\n    }\n  };\n\n  const onBlur = (event: React.FocusEvent<HTMLDivElement>) => {\n    if (\n      funnelInteractionId &&\n      subStepRef.current &&\n      !subStepRef.current.contains(event.relatedTarget) &&\n      funnelState.current !== 'cancelled'\n    ) {\n      FunnelMetrics.funnelSubStepComplete({\n        funnelInteractionId,\n        subStepSelector,\n        subStepNameSelector,\n        stepNumber,\n        stepNameSelector,\n        subStepAllSelector: getSubStepAllSelector(),\n      });\n    }\n  };\n\n  const funnelSubStepProps: Record<string, any> = funnelInteractionId\n    ? {\n        [DATA_ATTR_FUNNEL_SUBSTEP]: subStepId,\n        onFocus,\n        onBlur,\n      }\n    : {};\n\n  return { funnelSubStepProps, ...context };\n};\n\n/**\n * Custom React Hook to manage and interact with FunnelStep.\n * This hook will provide necessary properties required to track\n * and manage interactions with a FunnelStep component.\n *\n * The 'data-analytics-funnel-step' property of funnelStepProps is used to track the index of the current step in the funnel.\n * The context contains additional properties of the FunnelStep.\n */\nexport const useFunnelStep = () => {\n  const context = useContext(FunnelStepContext);\n  return context;\n};\n\n/**\n * Custom React Hook to manage and interact with Funnel.\n * This hook will provide necessary properties required to track\n * and manage interactions with a Funnel component.\n *\n * The 'data-analytics-funnel-interaction-id' property of funnelProps is used to track the unique identifier of the current interaction with the funnel.\n */\nexport const useFunnel = () => {\n  const context = useContext(FunnelContext);\n  const funnelProps: Record<string, string | number | boolean | undefined> = context.funnelInteractionId\n    ? {\n        [DATA_ATTR_FUNNEL_INTERACTION_ID]: context.funnelInteractionId,\n      }\n    : {};\n\n  return { funnelProps, ...context };\n};\n"],"mappings":"AAAA;AACA;AAEA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,aAAa,EAAEC,iBAAiB,EAAEC,oBAAoB,QAAQ,8BAA8B;AACrG,SAASC,+BAA+B,EAAEC,wBAAwB,EAAEC,qBAAqB,QAAQ,cAAc;AAC/G,SAASC,aAAa,QAAQ,KAAK;AAEnC;;;;;;;;;;AAUA,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAK;EACnC,MAAMC,OAAO,GAAGT,UAAU,CAACG,oBAAoB,CAAC;EAChD,MAAM;IAAEO,mBAAmB;IAAEC;EAAW,CAAE,GAAGC,SAAS,EAAE;EACxD,MAAM;IAAEC,UAAU;IAAEC;EAAgB,CAAE,GAAGC,aAAa,EAAE;EAExD,MAAM;IAAEC,SAAS;IAAEC,eAAe;IAAEC,mBAAmB;IAAEC,UAAU;IAAEC;EAAe,CAAE,GAAGX,OAAO;EAEhG,IAAIW,eAAe,EAAE;IACnB,OAAOX,OAAO;;EAGhB,MAAMY,OAAO,GAAIC,KAAuC,IAAI;IAC1D,IACEZ,mBAAmB,IACnBS,UAAU,CAACI,OAAO,KACjB,CAACD,KAAK,CAACE,aAAa,IAAI,CAACL,UAAU,CAACI,OAAO,CAACE,QAAQ,CAACH,KAAK,CAACE,aAAqB,CAAC,CAAC,EACnF;MACAjB,aAAa,CAACmB,kBAAkB,CAAC;QAC/BhB,mBAAmB;QACnBO,eAAe;QACfC,mBAAmB;QACnBL,UAAU;QACVC,gBAAgB;QAChBa,kBAAkB,EAAErB,qBAAqB;OAC1C,CAAC;;EAEN,CAAC;EAED,MAAMsB,MAAM,GAAIN,KAAuC,IAAI;IACzD,IACEZ,mBAAmB,IACnBS,UAAU,CAACI,OAAO,IAClB,CAACJ,UAAU,CAACI,OAAO,CAACE,QAAQ,CAACH,KAAK,CAACE,aAAa,CAAC,IACjDb,WAAW,CAACY,OAAO,KAAK,WAAW,EACnC;MACAhB,aAAa,CAACsB,qBAAqB,CAAC;QAClCnB,mBAAmB;QACnBO,eAAe;QACfC,mBAAmB;QACnBL,UAAU;QACVC,gBAAgB;QAChBa,kBAAkB,EAAErB,qBAAqB;OAC1C,CAAC;;EAEN,CAAC;EAED,MAAMwB,kBAAkB,GAAwBpB,mBAAmB,GAC/D;IACE,CAACL,wBAAwB,GAAGW,SAAS;IACrCK,OAAO;IACPO;GACD,GACD,EAAE;EAEN,OAAAG,MAAA,CAAAC,MAAA;IAASF;EAAkB,GAAKrB,OAAO;AACzC,CAAC;AAED;;;;;;;;AAQA,OAAO,MAAMM,aAAa,GAAGA,CAAA,KAAK;EAChC,MAAMN,OAAO,GAAGT,UAAU,CAACE,iBAAiB,CAAC;EAC7C,OAAOO,OAAO;AAChB,CAAC;AAED;;;;;;;AAOA,OAAO,MAAMG,SAAS,GAAGA,CAAA,KAAK;EAC5B,MAAMH,OAAO,GAAGT,UAAU,CAACC,aAAa,CAAC;EACzC,MAAMgC,WAAW,GAA0DxB,OAAO,CAACC,mBAAmB,GAClG;IACE,CAACN,+BAA+B,GAAGK,OAAO,CAACC;GAC5C,GACD,EAAE;EAEN,OAAAqB,MAAA,CAAAC,MAAA;IAASC;EAAW,GAAKxB,OAAO;AAClC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}